<?php


namespace api\modules\v1\modules\loan\controllers;


use api\controllers\Controller;
use backend\modules\auth\Session;
use backend\modules\conf\settings\SystemSettings;
use backend\modules\loan\Constants;
use backend\modules\loan\models\LoanFees;
use yii\web\BadRequestHttpException;
use yii\web\ServerErrorHttpException;

class LoanFeesController extends Controller
{
    public function init()
    {
        $this->modelClass = LoanFees::class;
        $this->resource = Constants::RES_PRODUCT_LOAN;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        if (Session::isOrganization()) {
            $org_id = Session::accountId();
        }

        if (empty($org_id)) {
            throw new BadRequestHttpException();
        }

        $condition = ['org_id' => $org_id];
        $params = [];
        $searchModel = LoanFees::searchModel([
            'defaultOrder' => ['code' => SORT_ASC],
            'condition' => $condition,
            'params' => $params,
        ]);
        $searchModel->is_active = 1;

        return $searchModel->search();
    }

    public function actionView($id)
    {
        if (Session::isOrganization()) {
            $org_id = Session::accountId();
        }

        if (empty($org_id)) {
            throw new BadRequestHttpException();
        }

        return LoanFees::loadModel(['id' => $id, 'org_id' => $org_id]);
    }

    public function actionCreate()
    {
        if (Session::isOrganization()) {
            $org_id = Session::accountId();
        }

        if (empty($org_id)) {
            throw new BadRequestHttpException();
        }

        $model = new LoanFees([
            'org_id' => $org_id,
            'is_active' => 1,
            'default_currency' => SystemSettings::getDefaultCurrency(),
        ]);

        $model->load(\Yii::$app->getRequest()->getBodyParams(), '');

        if ($model->validate()) {
            $model->save();
            $response = \Yii::$app->getResponse();
            $response->setStatusCode(201);
        } elseif (!$model->hasErrors()) {
            throw new ServerErrorHttpException('Failed to create object for unknown reasons');
        }

        return $model;
    }

    public function actionUpdate($id)
    {
        if (Session::isOrganization()) {
            $org_id = Session::accountId();
        }

        if (empty($org_id)) {
            throw new BadRequestHttpException();
        }

        $model = LoanFees::loadModel(['id' => $id, 'org_id' => $org_id]);
        $model->load(\Yii::$app->getRequest()->getBodyParams(), '');

        if ($model->validate()) {
            $model->save();
            $response = \Yii::$app->getResponse();
            $response->setStatusCode(200);
        } elseif (!$model->hasErrors()) {
            throw new ServerErrorHttpException('Failed to update the object for unknown reasons');
        }

        return $model;
    }
}